---
import { useTranslations } from '../i18n/ui';
import { link, getCurrentLocale } from '../utils/paths';
import LangMenu from './LangMenu.astro';

interface Props {
  locale: 'fr' | 'en' | 'ar';
  currentPath: string;
}

const { locale, currentPath } = Astro.props;
const t = useTranslations(locale);
const isRTL = locale === 'ar';
const baseUrl = import.meta.env.BASE_URL || '/';

// Navigation items
const navItems = [
  { key: 'nav.home', href: link({ locale }) },
  { key: 'nav.dates', href: link({ locale, slug: 'dates' }) },
  { key: 'nav.comites', href: link({ locale, slug: 'comites' }) },
  { key: 'nav.contact', href: link({ locale, slug: 'contact' }) },
];

function isActiveLink(href: string, currentPath: string): boolean {
  if (href === link({ locale })) {
    // Home page - exact match
    return currentPath === href || currentPath === href.replace(/\/$/, '');
  }
  return currentPath.startsWith(href);
}
---

<header class="sticky top-0 z-50 bg-white/90 dark:bg-surface-dark/90 backdrop-blur-md border-b border-slate-200 dark:border-slate-700">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between py-3">
      <!-- Logo and Brand -->
      <div class={`flex items-center gap-3 ${isRTL ? 'flex-row-reverse' : ''}`}>
        <img 
          src={`${baseUrl}assets/logos/CIRIV.png`} 
          alt="CIRIV Logo" 
          class="h-10 w-10 object-contain"
          width="40"
          height="40"
        />
        <a 
          href={link({ locale })} 
          class="text-xl font-bold text-brand-primary dark:text-brand-accent hover:text-brand-primaryDark dark:hover:text-teal-300 transition-colors"
          aria-label={`${t('nav.home')} - CIRIV 2026`}
        >
          CIRIV 2026
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class={`hidden md:flex items-center gap-6 ${isRTL ? 'flex-row-reverse' : ''}`} aria-label="Main navigation">
        {navItems.map(({ key, href }) => (
          <a
            href={href}
            class={`px-3 py-2 text-sm font-medium transition-all duration-200 rounded-full ${
              isActiveLink(href, currentPath)
                ? 'bg-slate-100 dark:bg-slate-800 text-brand-primary dark:text-brand-accent'
                : 'text-slate-700 dark:text-slate-300 hover:text-brand-primary dark:hover:text-brand-accent hover:bg-slate-50 dark:hover:bg-slate-800/50'
            }`}
          >
            {t(key as keyof typeof import('../i18n/ui').ui.fr)}
          </a>
        ))}
      </nav>

      <!-- Desktop Controls -->
      <div class={`hidden md:flex items-center gap-4 ${isRTL ? 'flex-row-reverse' : ''}`}>
        <!-- Theme Toggle -->
        <button
          id="theme-toggle"
          type="button"
          class="p-2 text-slate-600 dark:text-slate-400 hover:text-brand-primary dark:hover:text-brand-accent transition-colors rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800"
          aria-label={t('theme.toggle')}
        >
          <svg class="w-5 h-5 dark:hidden" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
          </svg>
          <svg class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
        </button>

        <!-- Language Menu -->
        <LangMenu locale={locale} currentPath={currentPath} />

        <!-- CTA Button -->
        <a
          href={link({ locale, slug: 'inscription' })}
          class="px-4 py-2 bg-brand-primary hover:bg-brand-primaryDark text-white font-medium rounded-lg transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-brand-accent focus:ring-offset-2 dark:focus:ring-offset-surface-dark"
        >
          {t('cta.inscription')}
        </a>
      </div>

      <!-- Mobile Menu Button -->
      <button
        id="mobile-menu-toggle"
        type="button"
        class="md:hidden p-2 text-slate-600 dark:text-slate-400 hover:text-brand-primary dark:hover:text-brand-accent transition-colors"
        aria-label={t('menu.toggle')}
        aria-expanded="false"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path class="block" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          <path class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="md:hidden hidden pb-4" aria-hidden="true">
      <nav class="space-y-2" aria-label="Mobile navigation">
        {navItems.map(({ key, href }) => (
          <a
            href={href}
            class={`block px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
              isActiveLink(href, currentPath)
                ? 'bg-slate-100 dark:bg-slate-800 text-brand-primary dark:text-brand-accent'
                : 'text-slate-700 dark:text-slate-300 hover:text-brand-primary dark:hover:text-brand-accent hover:bg-slate-50 dark:hover:bg-slate-800/50'
            }`}
          >
            {t(key as keyof typeof import('../i18n/ui').ui.fr)}
          </a>
        ))}
        
        <!-- Mobile Controls -->
        <div class="flex items-center justify-between pt-4 border-t border-slate-200 dark:border-slate-700 mt-4">
          <!-- Theme Toggle -->
          <button
            id="mobile-theme-toggle"
            type="button"
            class="flex items-center gap-2 px-3 py-2 text-slate-600 dark:text-slate-400 hover:text-brand-primary dark:hover:text-brand-accent transition-colors rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800"
            aria-label={t('theme.toggle')}
          >
            <svg class="w-5 h-5 dark:hidden" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
            </svg>
            <svg class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
              <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
            </svg>
            <span class="text-sm">{t('theme.toggle')}</span>
          </button>

          <!-- Language Menu in Mobile -->
          <div class="mobile-lang-menu">
            <LangMenu locale={locale} currentPath={currentPath} />
          </div>
        </div>
        
        <!-- Mobile CTA -->
        <a
          href={link({ locale, slug: 'inscription' })}
          class="block w-full mt-4 px-4 py-3 bg-brand-primary hover:bg-brand-primaryDark text-white font-medium text-center rounded-lg transition-colors"
        >
          {t('cta.inscription')}
        </a>
      </nav>
    </div>
  </div>
</header>

<script>
  import { getStoredTheme, setStoredTheme, applyTheme, type Theme } from '../utils/theme.ts';
  
  // Theme toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
    
    function toggleTheme() {
      const currentTheme = getStoredTheme();
      const newTheme: Theme = currentTheme === 'light' ? 'dark' : 'light';
      
      setStoredTheme(newTheme);
      applyTheme(newTheme);
    }
    
    if (themeToggle) {
      themeToggle.addEventListener('click', toggleTheme);
    }
    
    if (mobileThemeToggle) {
      mobileThemeToggle.addEventListener('click', toggleTheme);
    }
    
    // Mobile menu functionality
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener('click', () => {
        const isExpanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true';
        
        mobileMenuToggle.setAttribute('aria-expanded', (!isExpanded).toString());
        mobileMenu.setAttribute('aria-hidden', isExpanded.toString());
        mobileMenu.classList.toggle('hidden');
        
        // Toggle hamburger icon
        const lines = mobileMenuToggle.querySelectorAll('path');
        lines[0].classList.toggle('hidden');
        lines[1].classList.toggle('hidden');
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (event) => {
        if (!mobileMenuToggle.contains(event.target as Node) && 
            !mobileMenu.contains(event.target as Node)) {
          mobileMenuToggle.setAttribute('aria-expanded', 'false');
          mobileMenu.setAttribute('aria-hidden', 'true');
          mobileMenu.classList.add('hidden');
          
          const lines = mobileMenuToggle.querySelectorAll('path');
          lines[0].classList.remove('hidden');
          lines[1].classList.add('hidden');
        }
      });
      
      // Handle escape key
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
          mobileMenuToggle.setAttribute('aria-expanded', 'false');
          mobileMenu.setAttribute('aria-hidden', 'true');
          mobileMenu.classList.add('hidden');
          
          const lines = mobileMenuToggle.querySelectorAll('path');
          lines[0].classList.remove('hidden');
          lines[1].classList.add('hidden');
        }
      });
    }
  });
</script>