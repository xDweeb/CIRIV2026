---
export interface Props { locale?: 'en'|'fr'|'ar' }
const { locale='en' } = Astro.props;

import { useTranslations } from '../i18n/ui.ts';
import faqData from '../content/faq.json';

const t = useTranslations(locale);
const isRTL = locale === 'ar';

const fallbackMessages = {
  fr: "Je n'ai pas trouvé de réponse, veuillez nous contacter à",
  en: "I did not find an answer, please contact us at",
  ar: "لم أجد إجابة، المرجو التواصل معنا عبر البريد الإلكتروني"
};

const suggestedQuestions = faqData
  .filter(i => !['greeting','thanks'].includes(i.id))
  .slice(0,3);
---

<div id="chatbot-widget"
     class={`fixed bottom-4 z-50 chatbot-container ${isRTL?'left-2 sm:left-4':'right-2 sm:right-4'}`}
     data-locale={locale}>
  <!-- Toggle Button -->
  <button id="chat-toggle"
    class="chatbot-button bg-brand-primary hover:bg-brand-primaryDark text-white p-3 sm:p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-brand-accent focus:ring-offset-2"
    aria-label={t('chatbot.title')}>
    <svg id="chat-icon" class="w-5 h-5 sm:w-6 sm:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a9.863 9.863 0 01-4.906-1.287A6.967 6.967 0 0012 21c-2.331 0-4.512-.645-6.374-1.766l-.227-.133C3.142 18.156 2 16.154 2 14V7a5 5 0 015-5h10a5 5 0 015 5v5z"/>
    </svg>
    <svg id="close-icon" class="w-5 h-5 sm:w-6 sm:h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
    </svg>
  </button>

  <!-- Chat Window -->
  <div id="chat-window"
       class={`chat-window hidden absolute bottom-14 sm:bottom-16 ${isRTL?'left-0':'right-0'} w-80 sm:w-96 max-w-[calc(100vw-1rem)] sm:max-w-[calc(100vw-2rem)] h-96 bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden flex flex-col`}>
    <!-- Header - Fixed at top -->
    <div class="chat-header flex items-center justify-between px-4 py-3 border-b border-gray-200 bg-brand-primary text-white rounded-t-2xl flex-shrink-0">
      <div class={`flex items-center ${isRTL?'space-x-reverse space-x-3':'space-x-3'}`}>
        <div class="w-8 h-8 bg-brand-accent rounded-full flex items-center justify-center">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div>
          <h3 class="font-semibold text-sm">{t('chatbot.title')}</h3>
          <p class="text-xs opacity-90">CIRIV 2026</p>
        </div>
      </div>
      <button id="chat-minimize" class="p-2 rounded hover:bg-white/10 focus:outline-none transition-colors" aria-label="Close chat">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>

    <!-- Messages Area - Scrollable middle section -->
    <div id="chat-messages" class="chat-body flex-1 overflow-y-auto p-4 space-y-3 min-h-0">
      <!-- Welcome -->
      <div class={`flex items-start space-x-2 ${isRTL?'space-x-reverse':''}`}>
        <div class="w-8 h-8 bg-brand-primary text-white rounded-full flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="bg-slate-100 rounded-lg p-3 max-w-xs">
          <p class="text-sm text-slate-900">{t('chatbot.welcome')}</p>
        </div>
      </div>

      <!-- Suggestions -->
      <div id="suggested-questions" class="space-y-2">
        <div class="text-xs text-slate-500 px-2 py-1">
          {locale==='fr'?'Questions fréquentes :':locale==='en'?'Frequently asked:':'أسئلة شائعة:'}
        </div>
        {suggestedQuestions.map(faq => (
          <button
            class={`suggested-question-btn w-full bg-slate-50 hover:bg-slate-100 text-slate-700 rounded-lg p-3 text-sm transition-colors border border-slate-200 ${isRTL?'text-right':'text-left'}`}
            data-question={faq.question[locale]||faq.question.en}
            data-answer={faq.answer[locale]||faq.answer.en}>
            {faq.question[locale]||faq.question.en}
          </button>
        ))}
      </div>
    </div>

    <!-- Typing Indicator - Inside messages area -->
    <div id="typing-indicator" class="px-4 pb-2 hidden flex-shrink-0">
      <div class={`flex items-start space-x-2 ${isRTL?'space-x-reverse':''}`}>
        <div class="w-8 h-8 bg-brand-primary text-white rounded-full flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="bg-slate-100 rounded-lg p-3">
          <div class="flex space-x-1">
            <span class="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style="animation-delay:0ms"></span>
            <span class="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style="animation-delay:150ms"></span>
            <span class="w-2 h-2 bg-slate-400 rounded-full animate-bounce" style="animation-delay:300ms"></span>
          </div>
        </div>
      </div>
    </div>

    <!-- Input - Fixed at bottom -->
    <div class="chat-input-wrapper relative border-t border-gray-200 flex-shrink-0 bg-white">
      <form id="chat-form" class={`chat-form flex gap-2 p-3 ${isRTL?'flex-row-reverse':''}`}>
        <input id="chat-input" type="text"
          autocomplete="off"
          placeholder={t('chatbot.placeholder')}
          class={`flex-1 px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-brand-accent focus:border-transparent bg-white text-slate-900 placeholder-slate-500 text-sm ${isRTL?'text-right':'text-left'}`} />
        <button type="submit"
          class="send-btn px-4 py-2 bg-brand-primary hover:bg-brand-primaryDark text-white rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-brand-accent focus:ring-offset-2 disabled:opacity-50"
          aria-label={t('chatbot.send')}>
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
          </svg>
        </button>
      </form>
    </div>
  </div>
</div>

<script define:vars={{ faqData, locale, fallbackMessages }}>
class Chatbot {
  constructor(faqData, locale, fallbackMessages){
    this.faqData = faqData;
    this.locale = locale;
    this.fallback = fallbackMessages;
    this.isOpen = false;
    this.mobile = window.matchMedia('(max-width: 767px)').matches;
    this.init();
  }

  init(){
    this.cache();
    this.bind();
    this.setupSuggested();
    this.setupViewportHandlers();
  }

  cache(){
    this.widget = document.getElementById('chatbot-widget');
    this.windowEl = document.getElementById('chat-window');
    this.toggleBtn = document.getElementById('chat-toggle');
    this.minBtn = document.getElementById('chat-minimize');
    this.chatIcon = document.getElementById('chat-icon');
    this.closeIcon = document.getElementById('close-icon');
    this.form = document.getElementById('chat-form');
    this.input = document.getElementById('chat-input');
    this.messages = document.getElementById('chat-messages');
    this.typing = document.getElementById('typing-indicator');
    this.suggestions = document.getElementById('suggested-questions');
    this.header = this.windowEl?.querySelector('.chat-header');
    this.inputWrap = this.windowEl?.querySelector('.chat-input-wrapper');
  }

  bind(){
    this.toggleBtn?.addEventListener('click',()=>this.toggle());
    this.minBtn?.addEventListener('click',()=>this.toggle());
    this.form?.addEventListener('submit',(e)=>this.submit(e));

    // Keep input visible above keyboard on mobile only
    this.input?.addEventListener('focus', ()=> this.onFocus());
    this.input?.addEventListener('blur', ()=> this.onBlur());
  }

  setupSuggested(){
    document.querySelectorAll('.suggested-question-btn').forEach(btn=>{
      btn.addEventListener('click',()=>{
        const q = btn.getAttribute('data-question');
        const a = btn.getAttribute('data-answer');
        this.addMessage(q,'user');
        this.removeSuggestions();
        this.showTyping();
        setTimeout(()=>{
          this.hideTyping();
            this.addMessage(a,'bot');
        },600);
      });
    });
  }

  setupViewportHandlers(){
    if(window.visualViewport){
      window.visualViewport.addEventListener('resize', ()=> this.adjustForKeyboard());
    }
    window.addEventListener('orientationchange', ()=> setTimeout(()=>this.adjustForKeyboard(),300));
    window.addEventListener('resize', ()=> {
      this.mobile = window.matchMedia('(max-width: 767px)').matches;
      this.adjustForKeyboard();
    });
  }

  toggle(){
    if(!this.windowEl) return;
    this.isOpen = !this.isOpen;
    if(this.isOpen){
      this.windowEl.classList.remove('hidden');
      this.chatIcon?.classList.add('hidden');
      this.closeIcon?.classList.remove('hidden');
      this.widget?.classList.add('chat-open');
      if(this.mobile){
        this.windowEl.classList.add('mobile-full');
        this.adjustForKeyboard();
      }
      setTimeout(()=>this.input?.focus(),120);
      this.scrollBottom(true);
    } else {
      this.windowEl.classList.add('hidden');
      this.chatIcon?.classList.remove('hidden');
      this.closeIcon?.classList.add('hidden');
      this.widget?.classList.remove('chat-open');
      this.windowEl.classList.remove('mobile-full','keyboard-shift');
      document.body.classList.remove('chatlock');
      this.windowEl.style.setProperty('--vvh','');
    }
  }

  submit(e){
    e.preventDefault();
    const val = this.input.value.trim();
    if(!val) return;
    this.addMessage(val,'user');
    this.removeSuggestions();
    this.input.value='';
    this.showTyping();
    setTimeout(()=>{
      this.hideTyping();
      const ans = this.findAnswer(val);
      this.addMessage(ans,'bot');
    }, 600 + Math.random()*600);
  }

  removeSuggestions(){
    if(this.suggestions){
      this.suggestions.remove();
      this.suggestions = null;
    }
  }

  showTyping(){
    if(!this.typing) return;
    this.typing.classList.remove('hidden');
    this.scrollBottom();
  }

  hideTyping(){
    if(!this.typing) return;
    this.typing.classList.add('hidden');
  }

  findAnswer(q){
    // Simple but effective FAQ matching with basic improvements
    const query = q.toLowerCase();
    const words = query.split(/\s+/);
    
    // Basic synonym mapping for common variations and casual greetings
    const synonyms = {
      // Thanks variations
      'thx': 'thanks', 'thanx': 'thanks', 'merciii': 'merci', 'mercii': 'merci',
      // Common casual greetings
      'slt': 'salut', 'slut': 'salut', 'bnjr': 'bonjour', 'bjr': 'bonjour', 'bsr': 'bonsoir',
      'hi': 'hello', 'hey': 'hello', 'yo': 'hello',
      // Common words
      'ou': 'où', 'dates': 'date', 'congress': 'congres', 'conference': 'congres',
      'info': 'information', 'infos': 'information'
    };
    
    // Apply synonyms to words
    const processedWords = words.map(w => synonyms[w] || w);
    
    const results = this.faqData.map(item=>{
      const question = (item.question[this.locale]||item.question.en||'').toLowerCase();
      const keywords = (item.keywords||[]).map(k=>k.toLowerCase());
      let score=0;
      
      // Check each word
      processedWords.forEach(w=>{
        if(question.includes(w)) score += w.length;
        keywords.forEach(kw=>{
          if(kw===w) score += kw.length*3;
          else if(kw.includes(w)||w.includes(kw)) score += kw.length*2;
        });
      });
      
      // Bonus for full query match
      if(question.includes(query)) score += query.length*2;
      
      return {item,score};
    }).filter(r=>r.score>0).sort((a,b)=>b.score-a.score);
    
    if(results.length && results[0].score>2){
      const best = results[0].item;
      return best.answer[this.locale]||best.answer.en;
    }
    
    const fb = this.fallback[this.locale];
    return `${fb} <a href="mailto:info@ciriv.org" class="text-brand-primary underline">info@ciriv.org</a>`;
  }

  addMessage(content, sender){
    if(!this.messages) return;
    const wrap = document.createElement('div');
    if(sender==='user'){
      wrap.className='flex justify-end';
      wrap.innerHTML=`
        <div class="bg-brand-primary text-white rounded-lg p-3 max-w-xs">
          <p class="text-sm">${this.escape(content)}</p>
        </div>`;
    } else {
      wrap.className='flex items-start space-x-2';
      wrap.innerHTML=`
        <div class="w-8 h-8 bg-brand-primary text-white rounded-full flex items-center justify-center flex-shrink-0">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"/>
          </svg>
        </div>
        <div class="bg-slate-100 rounded-lg p-3 max-w-xs">
          <p class="text-sm text-slate-900">${content}</p>
        </div>`;
    }
    this.messages.appendChild(wrap);
    this.scrollBottom();
  }

  scrollBottom(force=false){
    if(!this.messages) return;
    requestAnimationFrame(()=>{
      this.messages.scrollTop = this.messages.scrollHeight;
      if(force) {
        // Ensure it really scrolls to bottom
        setTimeout(()=>{
          this.messages.scrollTop = this.messages.scrollHeight;
        }, 50);
      }
    });
  }

  onFocus(){
    if(this.mobile){
      this.adjustForKeyboard(true);
      document.body.classList.add('chatlock');
      setTimeout(()=>this.scrollBottom(true),150);
    }
    // For desktop, just ensure smooth scrolling to bottom
    if(!this.mobile){
      setTimeout(()=>this.scrollBottom(),100);
    }
  }

  onBlur(){
    if(this.mobile){
      this.windowEl?.classList.remove('keyboard-shift');
      document.body.classList.remove('chatlock');
      this.adjustForKeyboard();
    }
  }

  adjustForKeyboard(fromFocus=false){
    if(!this.isOpen || !this.mobile || !this.windowEl) return;
    const vv = window.visualViewport;
    if(vv){
      this.windowEl.style.setProperty('--vvh', vv.height+'px');
      if(fromFocus || vv.height < window.innerHeight){
        this.windowEl.classList.add('keyboard-shift');
      } else {
        this.windowEl.classList.remove('keyboard-shift');
      }
    } else {
      // Fallback
      this.windowEl.style.setProperty('--vvh', window.innerHeight+'px');
    }
    this.scrollBottom();
  }

  recalcBodyHeight(){
    if(!this.windowEl||!this.messages) return;
    const hHeader = this.header?.offsetHeight || 0;
    const hInput = this.inputWrap?.offsetHeight || 0;
    const total = this.windowEl.offsetHeight;
    const bodyH = total - hHeader - hInput;
    if(bodyH>80) this.messages.style.height = bodyH+'px';
  }

  escape(t){
    const d=document.createElement('div');
    d.textContent=t;
    return d.innerHTML;
  }
}

let chatbot;
if(document.readyState==='loading'){
  document.addEventListener('DOMContentLoaded',()=>chatbot=new Chatbot(faqData, locale, fallbackMessages));
}else{
  chatbot=new Chatbot(faqData, locale, fallbackMessages);
}
</script>

<style>
/* Base */
.chat-window { background:#ffffff !important; }
.chat-header { 
  background: var(--brand-primary, #059669) !important; 
  color: white !important;
}
.chat-input-wrapper { background:#ffffff; }
.chat-body { background:#ffffff; }

/* Mobile full view (drawer) */
@media (max-width:767px){
  .chat-window.mobile-full{
    position:fixed !important;
    inset:auto 0 0 0 !important;
    margin:0;
    width:100vw !important;
    max-width:100vw !important;
    border-radius:1.25rem 1.25rem 0 0;
    height:calc(var(--vvh, 100vh) - 56px);
    display:flex;
    flex-direction:column;
    animation:drawer-in .3s ease;
    transform:translateY(0);
  }
  .chat-window.mobile-full.keyboard-shift{
    height:calc(var(--vvh, 100vh) - 8px);
  }
  body.chatlock { overflow:hidden; }
}

/* Desktop positioning fixes */
@media (min-width:768px){
  .chatbot-container {
    position: fixed !important;
  }
  
  .chat-window {
    position: absolute !important;
    height: 24rem !important; /* Fixed height for consistent layout */
  }
  
  /* Ensure messages area scrolls properly on desktop */
  .chat-window #chat-messages {
    flex: 1;
    overflow-y: auto;
    scroll-behavior: smooth;
    min-height: 0;
  }
}

/* Animations */
@keyframes drawer-in{
  from { transform:translateY(20px); opacity:0; }
  to { transform:translateY(0); opacity:1; }
}

/* Button pulse */
@keyframes chatbot-pulse {
  0%,100% { transform:scale(1); }
  50% { transform:scale(1.05); }
}
.chatbot-button { animation:chatbot-pulse 4s ease-in-out infinite; animation-delay:2s; }
.chatbot-button:hover, .chat-open .chatbot-button { animation-play-state:paused; }

/* Close button styling */
#chat-minimize {
  min-width: 36px;
  min-height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
}

#chat-minimize:hover {
  background: rgba(255, 255, 255, 0.2) !important;
}

@media (max-width: 767px) {
  #chat-minimize {
    min-width: 44px;
    min-height: 44px;
    padding: 0.75rem !important;
  }
}

/* Scrollbar */
#chat-messages { scroll-behavior:smooth; }
#chat-messages::-webkit-scrollbar { width:6px; }
#chat-messages::-webkit-scrollbar-thumb { background:rgba(0,0,0,.25); border-radius:3px; }

/* Reduced motion */
@media (prefers-reduced-motion:reduce){
  .chatbot-button { animation:none; }
}

/* RTL adjustments (auto via flex classes already) */

/* Safe area (iOS) */
@supports(padding:max(0px)){
  @media (max-width:767px){
    .chat-window.mobile-full{
      padding-bottom: max(0px, env(safe-area-inset-bottom));
    }
  }
}
</style>